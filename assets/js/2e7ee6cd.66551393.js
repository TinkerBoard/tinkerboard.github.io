"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[940],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>u});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),m=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=m(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=m(a),c=n,u=d["".concat(p,".").concat(c)]||d[c]||k[c]||i;return a?r.createElement(u,o(o({ref:t},s),{},{components:a})):r.createElement(u,o({ref:t},s))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:n,o[1]=l;for(var m=2;m<i;m++)o[m]=a[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},3694:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>k,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var r=a(7462),n=(a(7294),a(3905));const i={},o="Tinker V",l={unversionedId:"products/Tinker-V",id:"products/Tinker-V",title:"Tinker V",description:"1. Build environment:",source:"@site/docs/products/Tinker-V.md",sourceDirName:"products",slug:"/products/Tinker-V",permalink:"/docs/products/Tinker-V",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tinker Edge R",permalink:"/docs/products/Tinker-Edge-R"},next:{title:"Tinker Board 3N",permalink:"/docs/products/tinker_board_3n"}},p={},m=[{value:"2.1 Flash bootloader",id:"21-flash-bootloader",level:2},{value:"2.2 Create microSD card image",id:"22-create-microsd-card-image",level:2},{value:"2.3 Flash image to eMMC",id:"23-flash-image-to-emmc",level:2}],s={toc:m},d="wrapper";function k(e){let{components:t,...a}=e;return(0,n.kt)(d,(0,r.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"tinker-v"},"Tinker V"),(0,n.kt)("h1",{id:"1-build-image"},"1. Build image"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Build environment:   "),(0,n.kt)("table",{parentName:"li"},(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Linux Host PC"),(0,n.kt)("th",{parentName:"tr",align:null},"Used as build/debug environment, 100GB free space on HDD is necessary"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"OS")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"td"},"Ubuntu 18.04 LTS or 20.04 LTS, 64 bit OS must be used")))))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Download the source code:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"$ repo init -u https://github.com/TinkerBoard/renesas-manifest.git -b linux5.10-rzfive\n$ repo sync\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Install and set up Docker enviornment   "),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},'$ sudo apt-get update\n$ sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent softwareproperties--common\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n$ sudo apt-key fingerprint 0EBFCD88\n$ sudo add-apt-repository "deb [arch=amd64] \nhttps://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"\n$ sudo apt-get update\n$ sudo apt-get install docker-ce docker-ce-cli containerd.io\n$ sudo docker run hello-world\n')),(0,n.kt)("p",{parentName:"li"},"Reference: ",(0,n.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/install/ubuntu/"},"https://docs.docker.com/engine/install/ubuntu/"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Manage Docker as a non-root user"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"$ sudo groupadd docker\n$ sudo usermod -aG docker $USER\n$ newgrp docker\n$ docker run hello-world\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Before starting the build, run the commands below on the Linux Host PC to install packages used for building the BSP."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"$ sudo apt-get update\n$ sudo apt-get install -y gawk wget git-core diffstat unzip texinfo gcc-multilib \\\nbuild-essential chrpath socat cpio python python3 python3-pip python3-pexpect \\\nxz-utils debianutils iputils-ping libsdl1.2-dev xterm p7zip-full sudo \\\nlibyaml-dev libssl-dev\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Go to the directory where you have downloaded the code base and execute the script.\nThis will take a while to install the necessary packages on the host and build the Docker image."),(0,n.kt)("p",{parentName:"li"},"   ",(0,n.kt)("inlineCode",{parentName:"p"},"$ ./docker_builder/docker-builder-run.sh"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Run the commands below to start a build.",(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("inlineCode",{parentName:"p"},"$ ./build.sh"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"After the build is successfully completed, it will show a similar output, and the command prompt will return.\n",(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/37dbe793-a7ee-41d3-8d4a-78098e846e1f",alt:"\u5716\u72471"}))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"The image generated will be located in the ",(0,n.kt)("em",{parentName:"p"},"build/tmp/deploy/images")," directory.",(0,n.kt)("br",{parentName:"p"}),"\n",(0,n.kt)("strong",{parentName:"p"},"Image files for Tinker V")),(0,n.kt)("table",{parentName:"li"},(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Item"),(0,n.kt)("th",{parentName:"tr",align:null},"File Name"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Linux Kernel"),(0,n.kt)("td",{parentName:"tr",align:null},"Image-rzfive-tinker-v.bin")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Device tree file"),(0,n.kt)("td",{parentName:"tr",align:null},"Image-r9a07g043f01-tinker-v.dtb")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"root file system"),(0,n.kt)("td",{parentName:"tr",align:null},"core-image-bsp-rzfive-tinker-v.tar.bz2")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Bootloader"),(0,n.kt)("td",{parentName:"tr",align:null},"spl-rzfive-tinker-v.srec, fit-rzfive-tinker-v.srec")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Flash Writer"),(0,n.kt)("td",{parentName:"tr",align:null},"Flash_Writer_SCIF_TINKER_V.mot")))))),(0,n.kt)("h1",{id:"2-flash-image"},"2. Flash image"),(0,n.kt)("h2",{id:"21-flash-bootloader"},"2.1 Flash bootloader"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Booting Flash Writer   "),(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Please set the SW1 dipswitches to \u2018on-on-on-on\u2019.  "),(0,n.kt)("table",{parentName:"li"},(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"SW1 Dip Switch"),(0,n.kt)("th",{parentName:"tr",align:null},"Status"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"SW1-1"),(0,n.kt)("td",{parentName:"tr",align:null},"ON")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"SW1-2"),(0,n.kt)("td",{parentName:"tr",align:null},"ON")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"SW1-3"),(0,n.kt)("td",{parentName:"tr",align:null},"ON")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"SW1-4"),(0,n.kt)("td",{parentName:"tr",align:null},"ON")))),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/43d70fc6-c881-4091-bb1e-b8144523dd9d",alt:"\u5716\u724711"}))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Connect the power adapter to the Tinker V, and it\u2019ll print the message of \u2018 Load Program to System RAM\u2019 on Tera Term terminal."),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/8eebbdbf-b398-41c7-9152-cf86c901ddf4",alt:"2-1-2"}))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Below is an example using ",(0,n.kt)("a",{parentName:"p",href:"https://ttssh2.osdn.jp/index.html.en"},"Tera Term"),". Open a \u201cSend file\u201d dialog by selecting \u201cFile\u201d \u2192 \u201cSend file\u201d menu."),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/e4ac7ffb-eec3-44ed-be66-3a4576b6b578",alt:"\u5716\u72473"})),(0,n.kt)("p",{parentName:"li"},"Then, select the image Flash_Writer_SCIF_TINKER_V.mot and click \u201cOpen\u201d."),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/eb4bca07-46aa-4052-843e-59689e07e076",alt:"\u5716\u72474"})),(0,n.kt)("p",{parentName:"li"},"After binary download is completed, Flash Writer starts automatically and shows a message of Flash writer version on the terminal."),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/929dc030-383d-4133-a872-16afae2654c5",alt:"\u5716\u72475"}))))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Writing Bootloader   "),(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Use \u201cXLS2\u201d command of Flash Writer to write boot loader binary files. This command is used for receiving binary data from the serial port and writing the data to a specified address of Flash ROM with information such as where the data should be loaded on the address of the main memory."),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/c7e03f17-f22d-482d-bba9-74aabf311ea7",alt:"\u5716\u72476"})),(0,n.kt)("p",{parentName:"li"},"Send the data of \u201cspl-rzfive-tinker-v.srec\u201d from terminal software after the message \u201cplease send !\u201d is shown."),(0,n.kt)("p",{parentName:"li"},"The terminal will print the message of \u2018Qspi Save Information\u2019 once the binary is downloaded successfully."),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/39128f3d-b94a-4e67-b9f3-6e11660875dc",alt:"\u5716\u72477"})),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"SPI Data Clear(H'FF) Check : H'00000000-0000FFFF,Clear OK?(y/n)\n")),(0,n.kt)("p",{parentName:"li"},"Please press \u201cy\u201d when a message prompt asks to clear SPI data.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Next, write another loader file by using XLS2 command again."),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/6a37c041-56d8-45c2-bc94-688b2ededcf1",alt:"\u5716\u72478"})),(0,n.kt)("p",{parentName:"li"},"Send the data of \u201cfit-rzfive-tinker-v.srec\u201d from terminal software after the message \u201cplease send !\u201d is shown."),(0,n.kt)("p",{parentName:"li"},"The terminal will print the message of \u2018Qspi Save Information\u2019 once the binary is downloaded successfully."),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/9a8e3145-b0d5-4329-bbc7-c5d85ae9e888",alt:"\u5716\u72479"})),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"SPI Data Clear(H'FF) Check : H'00000000-0000FFFF,Clear OK?(y/n)\n")),(0,n.kt)("p",{parentName:"li"},"Please press \u201cy\u201d when a message prompt asks to clear SPI data. ")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"After writing two loader files, turn off the power and set the SW1 dipswitches to \u2018off-off-on-on\u2019."),(0,n.kt)("table",{parentName:"li"},(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"SW1 Dip Switch"),(0,n.kt)("th",{parentName:"tr",align:null},"Status"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"SW1-1"),(0,n.kt)("td",{parentName:"tr",align:null},"OFF")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"SW1-2"),(0,n.kt)("td",{parentName:"tr",align:null},"OFF")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"SW1-3"),(0,n.kt)("td",{parentName:"tr",align:null},"ON")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"SW1-4"),(0,n.kt)("td",{parentName:"tr",align:null},"ON")))),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/023c967a-23d9-4da8-8949-b9a132eb949f",alt:"\u5716\u724710"})))))),(0,n.kt)("h2",{id:"22-create-microsd-card-image"},"2.2 Create microSD card image"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Create a microSD card to boot Linux"),(0,n.kt)("p",{parentName:"li"},"It is necessary to have a microSD card with over 4GB size to create a bootable SD card. You can use a Linux machine as Host PC to expand the kernel and the rootfs, using equipment such as USB card reader. Please format the SD card with the following steps first:"),(0,n.kt)("ol",{parentName:"li"},(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"When the microSD card is not connected to Linux Host PC:"),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"$ lsblk")),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/fd543b6e-c67b-4024-9cb9-0fa7c0e86732",alt:"\u5716\u72472"}))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"When the microSD card is connected to Linux Host PC with USB adapter")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Check the device name that is associated with the microSD card:"),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"$ lsblk")),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/99b25fe8-eb1a-4916-8d97-9cf68140f00d",alt:"\u5716\u72473"})),(0,n.kt)("p",{parentName:"li"},"The message above shows the MicroSD card associated with the /dev/sdd. Please be careful not to use the other device names in the following steps.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Change the partition table   "),(0,n.kt)("p",{parentName:"li"},"microSD card needs two partitions as listed below:    "),(0,n.kt)("table",{parentName:"li"},(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type/Number"),(0,n.kt)("th",{parentName:"tr",align:null},"Size"),(0,n.kt)("th",{parentName:"tr",align:null},"File system"),(0,n.kt)("th",{parentName:"tr",align:null},"Contents"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Primary#1"),(0,n.kt)("td",{parentName:"tr",align:null},"500MB (minimum 128MB)"),(0,n.kt)("td",{parentName:"tr",align:null},"FAT32"),(0,n.kt)("td",{parentName:"tr",align:null},"Linux Kernel, Device Tree")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Primary#2"),(0,n.kt)("td",{parentName:"tr",align:null},"All remaining"),(0,n.kt)("td",{parentName:"tr",align:null},"Ext4"),(0,n.kt)("td",{parentName:"tr",align:null},"root filesystem")))),(0,n.kt)("p",{parentName:"li"},"According to microSD block device, set the partition table using the ",(0,n.kt)("inlineCode",{parentName:"p"},"fdisk")," command:    "),(0,n.kt)("p",{parentName:"li"},"In the example below, the microSD block device is /dev/sdd   "),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/bec0b3e5-cf01-4139-88f1-4cba46ce35ac",alt:"\u5716\u72474"}),"   "),(0,n.kt)("p",{parentName:"li"},"Then, check the partition table with the commands ",(0,n.kt)("inlineCode",{parentName:"p"},"partprobe")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"fdisk -l /dev/sdd")," below:"),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/6d1b0318-c0a8-4e73-88a9-d7f457852221",alt:"\u5716\u72475"}))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Format partitions with command ",(0,n.kt)("inlineCode",{parentName:"p"},"mkfs"),".(with device format, in this case it\u2019s mkfs.vfat and mkfs ext4) "),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/d7e29931-3baa-4417-8b5a-5e83285eb871",alt:"\u5716\u72476"}))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Write kernel and device tree"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"$ mkdir tmp\n$ sudo mount /dev/sdd1 tmp\n$ sudo cp Image-rzfive-tinker-v.bin tmp/\n$ sudo cp Image-r9a07g043f01-tinker-v.dtb tmp/\n$ sudo umount /dev/sdd1\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Write root filesystem"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"$ sudo mount /dev/sdd2 tmp\n$ sudo tar xf core-image-bsp-rzfive-tinker-v.tar.bz2 -C tmp/\n$ sudo umount /dev/sdd2\n$ rm -rf tmp\n"))))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Setting U-boot boot from microSD card"),(0,n.kt)("p",{parentName:"li"},"Insert the micro SD card to Tinker V, and then plug the power supply. Press any key on the keyboard to stop autoboot from the serial console. If U-Boot is stopped, it displays a command line console."),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/7fae709c-7119-476f-9c53-b370b0e47b4b",alt:"\u5716\u72477"})),(0,n.kt)("p",{parentName:"li"},"Please set these values and save them to the Flash ROM."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"=> env default -a\n=> saveenv\n=> setenv bootargs 'root=/dev/mmcblk1p2 rootwait'\n=> setenv bootcmd 'mmc dev 1;fatload mmc 1:1 0x48080000 Image-rzfive-tinker-v.bin;fatload mmc 1:1 0x48000000 Image-r9a07g043f01-tinker-v.dtb;booti 0x48080000 - 0x48000000'\n=> saveenv\n")),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/fbec53e7-f9e7-49fd-a77b-592bb48b7c77",alt:"\u5716\u72478"})))),(0,n.kt)("h2",{id:"23-flash-image-to-emmc"},"2.3 Flash image to eMMC"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Create a microSD card to boot linux for eMMC boot."),(0,n.kt)("p",{parentName:"li"},"Please refer to chapter ",(0,n.kt)("strong",{parentName:"p"},"2.2. Create microSD card image")," for creating microSD image.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"After creating the microSD card image, copy a kernel image, a device tree file and rootfs to the second partition of the microSD card."),(0,n.kt)("p",{parentName:"li"},"e.g. microSD block device is /dev/sdd"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"$ mkdir tmp\n$ sudo mount /dev/sdd2 tmp\n$ sudo cp Image-rzfive-tinker-v.bin tmp/home/root/\n$ sudo cp Image-r9a07g043f01-tinker-v.dtb tmp/home/root/\n$ sudo cp core-image-bsp-rzfive-tinker-v.tar.bz2 tmp/home/root/\n$ sudo umount /dev/sdd2\n$ rm -rf tmp\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Set Boot from microSD."),(0,n.kt)("p",{parentName:"li"},"Insert microSD card to Tinker V, then power on Tinker V. Press any key to stop autoboot from the serial console. If U-Boot is stopped, the terminal will stop show a command line console."),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/4b9a0bbd-5970-4982-8f63-1e0cb4816a8c",alt:"\u5716\u72479"})),(0,n.kt)("p",{parentName:"li"},"Please set these values and save them to the Flash ROM."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"=> env default -a\n=> saveenv\n=> setenv bootargs 'root=/dev/mmcblk1p2 rootwait'\n=> setenv bootcmd 'mmc dev 1;fatload mmc 1:1 0x48080000 Image-rzfive-tinker-v.bin;fatload mmc 1:1 0x48000000 Image-r9a07g043f01-tinker-v.dtb;booti 0x48080000 - 0x48000000'\n=> saveenv\n\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Power off Tinker V then Power on.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"After booting Linux, please login as root and create partitions on eMMC."),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/df06e383-aaec-4706-895b-c6724841a466",alt:"\u5716\u72471"})),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/a0abd70b-04fc-4a72-81c3-8e7045ad1d3e",alt:"\u5716\u724711"})),(0,n.kt)("p",{parentName:"li"},"Format eMMC."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"$ mkfs.ext4 /dev/mmcblk0p1\n$ mkfs.ext4 /dev/mmcblk0p2\n")),(0,n.kt)("p",{parentName:"li"},"Write the kernel, the device tree."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"$ mount /dev/mmcblk0p1 /mnt/\n$ cp /home/root/Image-rzfive-tinker-v.bin /mnt/\n$ cp /home/root/Image-r9a07g043f01-tinker-v.dtb /mnt/\n$ umount /dev/mmcblk0p1\n")),(0,n.kt)("p",{parentName:"li"},"Write the root filesystem."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"$ mount /dev/mmcblk0p2 /mnt/\n$ tar xf /home/root/core-image-bsp-rzfive-tinker-v.tar.bz2 -C /mnt/\n$ umount /dev/mmcblk0p2\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Setting U-boot for eMMC boot."),(0,n.kt)("p",{parentName:"li"},"Insert microSD card to Tinker V, then power on Tinker V. Press any key to stop autoboot from the serial console. If U-Boot is stopped, the terminal will stop show a command line console."),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/e6dbff13-7631-4f63-a985-66f2d3ebc8d6",alt:"\u5716\u724712"})),(0,n.kt)("p",{parentName:"li"},"Please set these values and save them to the Flash ROM."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"=> env default -a\n=> saveenv\n=> setenv bootargs 'root=/dev/mmcblk0p2 rootwait'\n=> setenv bootcmd 'mmc dev 1;ext4load mmc 0:1 0x48080000 Image-rzfive-tinker-v.bin;ext4load mmc 0:1 0x48000000 Image-r9a07g043f01-tinker-v.dtb;booti 0x48080000 - 0x48000000'\n=> saveenv\n")),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("img",{parentName:"p",src:"https://github.com/TinkerBoard/TinkerBoard/assets/97945168/f50c7088-2bf3-424f-abcd-987a6c8866ab",alt:"\u5716\u724713"})))))}k.isMDXComponent=!0}}]);